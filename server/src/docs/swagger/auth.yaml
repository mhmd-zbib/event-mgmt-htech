openapi: 3.0.3
info:
  title: Authentication API
  version: 1.0.0
  description: API endpoints for authentication and authorization

paths:
  /api/auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      description: Create a new user account with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  minLength: 6
                  example: "password123"
                firstName:
                  type: string
                  example: "John"
                lastName:
                  type: string
                  example: "Doe"
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registered successfully"
                  user:
                    $ref: '#/components/schemas/AuthUser'
                  token:
                    $ref: '#/components/schemas/Tokens'
        '400':
          $ref: '#/components/responses/ValidationError'
        '409':
          description: Email already in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Email already in use"
                statusCode: 409
                timestamp: "2025-05-05T12:00:00.000Z"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/auth/login:
    post:
      tags:
        - Auth
      summary: User login
      description: Authenticate a user with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        '200':
          description: User successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
                  user:
                    $ref: '#/components/schemas/AuthUser'
                  token:
                    $ref: '#/components/schemas/Tokens'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Invalid email or password"
                statusCode: 401
                timestamp: "2025-05-05T12:00:00.000Z"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/auth/refresh:
    post:
      tags:
        - Auth
      summary: Refresh access token
      description: Get a new access token using a valid refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Token successfully refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token refreshed successfully"
                  user:
                    $ref: '#/components/schemas/AuthUser'
                  token:
                    $ref: '#/components/schemas/Tokens'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Invalid or expired refresh token"
                statusCode: 401
                timestamp: "2025-05-05T12:00:00.000Z"
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    AuthUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "a47ac10b-58cc-4372-a567-0e02b2c3d000"
        email:
          type: string
          format: email
          example: "user@example.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        createdAt:
          type: string
          format: date-time
          example: "2025-05-05T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-05-05T10:30:00Z"
        lastLogin:
          type: string
          format: date-time
          example: "2025-05-05T10:30:00Z"
    
    Tokens:
      type: object
      properties:
        accessToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expiresIn:
          type: integer
          example: 3600