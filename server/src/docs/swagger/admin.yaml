openapi: 3.0.3
info:
  title: Admin API
  version: 1.0.0
  description: Administrative API endpoints for user and system management

paths:
  /admin/users:
    get:
      tags:
        - Admin
      summary: Get all users
      description: Retrieve a paginated list of all users (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          description: Field to sort by
          schema:
            type: string
            enum: [email, firstName, lastName, role, createdAt, lastLogin]
            default: createdAt
        - name: sortOrder
          in: query
          description: Sort order
          schema:
            type: string
            enum: [ASC, DESC, asc, desc]
            default: DESC
        - name: role
          in: query
          description: Filter by role
          schema:
            type: string
            enum: [user, admin]
        - name: isActive
          in: query
          description: Filter by active status
          schema:
            type: boolean
        - name: search
          in: query
          description: Search in email, firstName, or lastName
          schema:
            type: string
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserAdmin'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  sort:
                    $ref: '#/components/schemas/Sort'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/users/{id}:
    get:
      tags:
        - Admin
      summary: Get user by ID
      description: Retrieve a specific user by ID (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/UserAdminDetail'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Admin
      summary: Update user
      description: Update a specific user (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserAdminRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User updated successfully"
                  user:
                    $ref: '#/components/schemas/UserAdmin'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          description: Email already in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Admin
      summary: Delete user
      description: Delete a specific user (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User deleted successfully"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/users/{id}/status:
    patch:
      tags:
        - Admin
      summary: Update user status
      description: Enable or disable a user account (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - isActive
              properties:
                isActive:
                  type: boolean
                  example: false
      responses:
        '200':
          description: User status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User status updated successfully"
                  user:
                    $ref: '#/components/schemas/UserAdmin'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/users/{id}/role:
    patch:
      tags:
        - Admin
      summary: Update user role
      description: Change a user's role (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - role
              properties:
                role:
                  type: string
                  enum: [user, admin]
                  example: "admin"
      responses:
        '200':
          description: User role updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User role updated successfully"
                  user:
                    $ref: '#/components/schemas/UserAdmin'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/system/logs:
    get:
      tags:
        - Admin
      summary: Get system logs
      description: Retrieve system logs (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: level
          in: query
          description: Log level
          schema:
            type: string
            enum: [error, warn, info, debug]
        - name: startDate
          in: query
          description: Start date for logs
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: End date for logs
          schema:
            type: string
            format: date
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: Logs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SystemLog'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/system/health:
    get:
      tags:
        - Admin
      summary: Get system health
      description: Retrieve system health information (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Health information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemHealth'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    UpdateUserAdminRequest:
      type: object
      properties:
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        role:
          type: string
          enum: [user, admin]
          example: "admin"
        isActive:
          type: boolean
          example: true

    UserAdmin:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "a47ac10b-58cc-4372-a567-0e02b2c3d000"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        role:
          type: string
          enum: [user, admin]
          example: "user"
        isActive:
          type: boolean
          example: true
        isEmailVerified:
          type: boolean
          example: true
        lastLogin:
          type: string
          format: date-time
          example: "2025-05-05T10:30:00Z"
        createdAt:
          type: string
          format: date-time
          example: "2025-01-01T09:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-05-01T14:20:00Z"

    UserAdminDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "a47ac10b-58cc-4372-a567-0e02b2c3d000"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        role:
          type: string
          enum: [user, admin]
          example: "user"
        isActive:
          type: boolean
          example: true
        isEmailVerified:
          type: boolean
          example: true
        lastLogin:
          type: string
          format: date-time
          example: "2025-05-05T10:30:00Z"
        createdAt:
          type: string
          format: date-time
          example: "2025-01-01T09:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-05-01T14:20:00Z"
        phoneNumber:
          type: string
          example: "+1234567890"
        bio:
          type: string
          example: "Software engineer with 5+ years of experience."
        stats:
          type: object
          properties:
            eventsCreated:
              type: integer
              example: 5
            eventsAttended:
              type: integer
              example: 10
            eventsRegistered:
              type: integer
              example: 15
            lastActivity:
              type: string
              format: date-time
              example: "2025-05-05T10:30:00Z"

    SystemLog:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          example: "2025-05-05T10:30:00Z"
        level:
          type: string
          enum: [error, warn, info, debug]
          example: "error"
        message:
          type: string
          example: "Database connection failed"
        service:
          type: string
          example: "htech-assessment-api"
        context:
          type: object
          additionalProperties: true
          example:
            requestId: "req-123456"
            userId: "a47ac10b-58cc-4372-a567-0e02b2c3d000"
            path: "/api/events"
            method: "GET"
            statusCode: 500

    SystemHealth:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
          example: "healthy"
        timestamp:
          type: string
          format: date-time
          example: "2025-05-08T10:30:00Z"
        uptime:
          type: number
          example: 86400
        version:
          type: string
          example: "1.0.0"
        services:
          type: object
          properties:
            database:
              type: object
              properties:
                status:
                  type: string
                  enum: [healthy, degraded, unhealthy]
                  example: "healthy"
                responseTime:
                  type: number
                  example: 10
            redis:
              type: object
              properties:
                status:
                  type: string
                  enum: [healthy, degraded, unhealthy]
                  example: "healthy"
                responseTime:
                  type: number
                  example: 5
        memory:
          type: object
          properties:
            total:
              type: number
              example: 8192
            used:
              type: number
              example: 4096
            free:
              type: number
              example: 4096
        cpu:
          type: object
          properties:
            usage:
              type: number
              example: 30
            cores:
              type: integer
              example: 4

    Pagination:
      type: object
      properties:
        total:
          type: integer
          example: 50
        page:
          type: integer
          example: 1
        size:
          type: integer
          example: 10
        totalPages:
          type: integer
          example: 5
        hasNext:
          type: boolean
          example: true
        hasPrevious:
          type: boolean
          example: false

    Sort:
      type: object
      properties:
        sortBy:
          type: string
          example: "createdAt"
        sortOrder:
          type: string
          example: "DESC"