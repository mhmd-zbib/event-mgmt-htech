openapi: 3.0.3
info:
  title: Tag API
  version: 1.0.0
  description: API endpoints for tag management

paths:
  /tags:
    get:
      tags:
        - Tags
      summary: Get all tags
      description: Retrieve a paginated list of tags
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          description: Field to sort by
          schema:
            type: string
            enum: [name, createdAt]
            default: name
        - name: sortOrder
          in: query
          description: Sort order (ascending or descending)
          schema:
            type: string
            enum: [ASC, DESC, asc, desc]
            default: ASC
        - name: search
          in: query
          description: Search tags by name
          schema:
            type: string
      responses:
        '200':
          description: List of tags retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Tag'
                  - $ref: '#/components/schemas/PaginatedResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Tags
      summary: Create a new tag
      description: Create a new tag (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: "Workshop"
      responses:
        '201':
          description: Tag created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Tag created successfully"
                  tag:
                    $ref: '#/components/schemas/Tag'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Tag name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Tag with this name already exists"
                statusCode: 409
                timestamp: "2025-05-05T12:00:00.000Z"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /tags/{id}:
    get:
      tags:
        - Tags
      summary: Get tag by ID
      description: Retrieve a specific tag by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Tag ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Tag retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  tag:
                    $ref: '#/components/schemas/Tag'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Tags
      summary: Update tag
      description: Update a specific tag (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Tag ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Updated Workshop"
      responses:
        '200':
          description: Tag updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Tag updated successfully"
                  tag:
                    $ref: '#/components/schemas/Tag'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          description: Tag name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Tag with this name already exists"
                statusCode: 409
                timestamp: "2025-05-05T12:00:00.000Z"
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Tags
      summary: Delete tag
      description: Delete a specific tag (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Tag ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Tag deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Tag deleted successfully"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /tags/{id}/events:
    get:
      tags:
        - Tags
      summary: Get events by tag
      description: Retrieve all events with a specific tag
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Tag ID
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          description: Field to sort by
          schema:
            type: string
            enum: [title, startDate, endDate, createdAt]
            default: startDate
        - name: sortOrder
          in: query
          description: Sort order (ascending or descending)
          schema:
            type: string
            enum: [ASC, DESC, asc, desc]
            default: ASC
      responses:
        '200':
          description: List of events with tag retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Event'
                  - $ref: '#/components/schemas/PaginatedResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    Tag:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "t47ac10b-58cc-4372-a567-0e02b2c3d000"
        name:
          type: string
          example: "Workshop"
        createdAt:
          type: string
          format: date-time
          example: "2025-05-05T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-05-05T10:30:00Z"
        eventCount:
          type: integer
          example: 12
          description: Number of events with this tag
    PaginatedResponse:
      type: object
      properties:
        page:
          type: integer
          example: 1
        size:
          type: integer
          example: 10
        totalPages:
          type: integer
          example: 5
        totalItems:
          type: integer
          example: 50
    Error:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: integer
        timestamp:
          type: string
          format: date-time
    ValidationError:
      type: object
      properties:
        message:
          type: string
        errors:
          type: object
          additionalProperties:
            type: string
    UnauthorizedError:
      type: object
      properties:
        message:
          type: string
    NotFoundError:
      type: object
      properties:
        message:
          type: string