openapi: 3.0.3
info:
  title: Category API
  version: 1.0.0
  description: API endpoints for category management

paths:
  /categories:
    get:
      tags:
        - Categories
      summary: Get all categories
      description: Retrieve a paginated list of categories
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [name, createdAt]
            default: createdAt
          description: Field to sort by
        - in: query
          name: sortOrder
          schema:
            type: string
            enum: [ASC, DESC, asc, desc]
            default: DESC
          description: Sort order (ascending or descending)
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  sort:
                    $ref: '#/components/schemas/Sort'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Categories
      summary: Create a new category
      description: Create a new event category (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  minLength: 2
                  maxLength: 50
                  example: "Technology"
                description:
                  type: string
                  maxLength: 500
                  example: "Events related to technology and innovation"
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category created successfully
                  category:
                    $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /categories/{id}:
    get:
      tags:
        - Categories
      summary: Get category by ID
      description: Retrieve a specific category by its ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: UUID of the category
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                type: object
                properties:
                  category:
                    $ref: '#/components/schemas/Category'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Categories
      summary: Update a category
      description: Update an existing category (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: UUID of the category to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 2
                  maxLength: 50
                  example: "Updated Technology"
                description:
                  type: string
                  maxLength: 500
                  example: "Updated description for technology events"
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category updated successfully
                  category:
                    $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Categories
      summary: Delete a category
      description: Delete a category by ID (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: UUID of the category to delete
      responses:
        '200':
          description: Category deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /categories/{id}/events:
    get:
      tags:
        - Categories
        - Events
      summary: Get events by category
      description: Retrieve a paginated list of events belonging to a specific category
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: UUID of the category
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [name, createdAt, startDate, endDate]
            default: startDate
          description: Field to sort by
        - in: query
          name: sortOrder
          schema:
            type: string
            enum: [ASC, DESC, asc, desc]
            default: ASC
          description: Sort order (ascending or descending)
      responses:
        '200':
          description: List of events in the category
          content:
            application/json:
              schema:
                type: object
                properties:
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  sort:
                    $ref: '#/components/schemas/Sort'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        name:
          type: string
          example: "Technology"
        description:
          type: string
          example: "Events related to technology and innovation"
        createdAt:
          type: string
          format: date-time
          example: "2025-05-05T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-05-05T10:30:00Z"
        createdBy:
          type: string
          format: uuid
          example: "a47ac10b-58cc-4372-a567-0e02b2c3d000"
        creator:
          $ref: '#/components/schemas/User'
    
    Pagination:
      type: object
      properties:
        totalItems:
          type: integer
          example: 50
        totalPages:
          type: integer
          example: 5
        currentPage:
          type: integer
          example: 1
        pageSize:
          type: integer
          example: 10
    
    Sort:
      type: object
      properties:
        field:
          type: string
          example: "createdAt"
        order:
          type: string
          example: "DESC"