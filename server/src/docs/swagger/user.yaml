openapi: 3.0.3
info:
  title: User API
  version: 1.0.0
  description: API endpoints for user management

paths:
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a paginated list of users (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [email, firstName, lastName, createdAt, lastLogin]
            default: createdAt
          description: Field to sort by
        - in: query
          name: sortOrder
          schema:
            type: string
            enum: [ASC, DESC, asc, desc]
            default: DESC
          description: Sort order (ascending or descending)
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Users retrieved successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  sort:
                    $ref: '#/components/schemas/Sort'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me:
    get:
      tags:
        - Users
      summary: Get current user profile
      description: Retrieve the authenticated user's profile information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User profile retrieved successfully
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Users
      summary: Update current user profile
      description: Update the authenticated user's profile information
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: "John"
                lastName:
                  type: string
                  example: "Doe"
      responses:
        '200':
          description: User profile updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User profile updated successfully
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    patch:
      tags:
        - Users
      summary: Change password
      description: Change the authenticated user's password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
              properties:
                currentPassword:
                  type: string
                  format: password
                  example: "CurrentPassword123!"
                newPassword:
                  type: string
                  format: password
                  minLength: 8
                  example: "NewPassword123!"
                confirmPassword:
                  type: string
                  format: password
                  example: "NewPassword123!"
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password changed successfully
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          description: Current password is incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a specific user by ID (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: UUID of the user
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User retrieved successfully
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "a47ac10b-58cc-4372-a567-0e02b2c3d000"
        email:
          type: string
          format: email
          example: "user@example.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        role:
          type: string
          enum: [user, admin]
          example: "user"
        isActive:
          type: boolean
          example: true
        lastLogin:
          type: string
          format: date-time
          example: "2025-05-05T10:30:00Z"
        createdAt:
          type: string
          format: date-time
          example: "2025-05-05T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-05-05T10:30:00Z"
    
    Pagination:
      type: object
      properties:
        totalItems:
          type: integer
          example: 50
        totalPages:
          type: integer
          example: 5
        currentPage:
          type: integer
          example: 1
        pageSize:
          type: integer
          example: 10
    
    Sort:
      type: object
      properties:
        field:
          type: string
          example: "createdAt"
        order:
          type: string
          example: "DESC"