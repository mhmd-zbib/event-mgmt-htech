openapi: 3.0.3
info:
  title: User API
  version: 1.0.0
  description: API endpoints for user management

paths:
  /users:
    get:
      tags:
        - Users
      summary: List users
      description: Get a paginated list of users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - name: search
          in: query
          description: Search term for user name or email
          required: false
          schema:
            type: string
        - name: role
          in: query
          description: Filter by user role
          required: false
          schema:
            type: string
            enum: [user, admin]
        - name: status
          in: query
          description: Filter by user status
          required: false
          schema:
            type: string
            enum: [active, inactive]
        - name: sortBy
          in: query
          description: Field to sort by
          required: false
          schema:
            type: string
            enum: [firstName, lastName, email, createdAt, lastLogin]
            default: createdAt
        - name: sortOrder
          in: query
          description: Sort order
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserSummary'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Users
      summary: Create user
      description: Create a new user (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User created successfully"
                  user:
                    $ref: '#/components/schemas/UserDetail'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '409':
          description: Email already in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
  
  /users/{userId}:
    get:
      tags:
        - Users
      summary: Get user
      description: Get a user by ID
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/UserDetail'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Users
      summary: Update user
      description: Update a user by ID (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User updated successfully"
                  user:
                    $ref: '#/components/schemas/UserDetail'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          description: Email already in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete a user by ID (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User deleted successfully"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}/status:
    patch:
      tags:
        - Users
      summary: Update user status
      description: Activate or deactivate a user (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - isActive
              properties:
                isActive:
                  type: boolean
                  example: true
      responses:
        '200':
          description: User status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User status updated successfully"
                  user:
                    $ref: '#/components/schemas/UserDetail'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}/role:
    patch:
      tags:
        - Users
      summary: Update user role
      description: Change a user's role (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - role
              properties:
                role:
                  type: string
                  enum: [user, admin]
                  example: "admin"
      responses:
        '200':
          description: User role updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User role updated successfully"
                  user:
                    $ref: '#/components/schemas/UserDetail'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}/events:
    get:
      tags:
        - Users
      summary: Get user events
      description: Get events associated with a user
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - name: status
          in: query
          description: Filter by event status
          required: false
          schema:
            type: string
            enum: [upcoming, past, draft, published, cancelled]
        - name: sortBy
          in: query
          description: Field to sort by
          required: false
          schema:
            type: string
            enum: [title, startDate, createdAt]
            default: startDate
        - name: sortOrder
          in: query
          description: Sort order
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
      responses:
        '200':
          description: List of user events
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventSummary'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  parameters:
    page:
      name: page
      in: query
      description: Page number
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    
    limit:
      name: limit
      in: query
      description: Number of items per page
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

  schemas:
    CreateUserRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
        - role
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          example: "SecureP@ssw0rd"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        phoneNumber:
          type: string
          example: "+1234567890"
        role:
          type: string
          enum: [user, admin]
          example: "user"
        isActive:
          type: boolean
          example: true
        isEmailVerified:
          type: boolean
          example: false

    UpdateUserRequest:
      type: object
      properties:
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        phoneNumber:
          type: string
          example: "+1234567890"
        bio:
          type: string
          example: "Software engineer with a passion for web development."
        profileImage:
          type: string
          format: uri
          example: "https://example.com/images/john-profile.jpg"

    UserSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "a47ac10b-58cc-4372-a567-0e02b2c3d000"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        role:
          type: string
          enum: [user, admin]
          example: "user"
        isActive:
          type: boolean
          example: true
        isEmailVerified:
          type: boolean
          example: true
        lastLogin:
          type: string
          format: date-time
          example: "2025-05-05T10:30:00Z"
        createdAt:
          type: string
          format: date-time
          example: "2025-01-01T09:00:00Z"

    UserDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "a47ac10b-58cc-4372-a567-0e02b2c3d000"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        phoneNumber:
          type: string
          example: "+1234567890"
        bio:
          type: string
          example: "Software engineer with a passion for web development."
        profileImage:
          type: string
          format: uri
          example: "https://example.com/images/john-profile.jpg"
        role:
          type: string
          enum: [user, admin]
          example: "user"
        isActive:
          type: boolean
          example: true
        isEmailVerified:
          type: boolean
          example: true
        lastLogin:
          type: string
          format: date-time
          example: "2025-05-05T10:30:00Z"
        createdAt:
          type: string
          format: date-time
          example: "2025-01-01T09:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-05-01T14:20:00Z"

    EventSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "b58cc10b-47ac-4372-a567-0e02b2c3d111"
        title:
          type: string
          example: "Annual Tech Conference 2025"
        description:
          type: string
          example: "Join us for the biggest tech event of the year."
        startDate:
          type: string
          format: date-time
          example: "2025-06-15T09:00:00Z"
        endDate:
          type: string
          format: date-time
          example: "2025-06-17T18:00:00Z"
        location:
          type: string
          example: "Tech Convention Center, San Francisco"
        status:
          type: string
          enum: [draft, published, cancelled]
          example: "published"
        categoryId:
          type: string
          format: uuid
          example: "c47ac10b-58cc-4372-a567-0e02b2c3d222"
        categoryName:
          type: string
          example: "Technology"
        createdAt:
          type: string
          format: date-time
          example: "2025-01-15T14:30:00Z"

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        totalItems:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 5

    Error:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: string
          example: "Validation failed"
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: "email"
              message:
                type: string
                example: "Invalid email format"

  responses:
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            
    UnauthorizedError:
      description: Unauthorized - Authentication required or token expired
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 401
              message:
                type: string
                example: "Authentication required"
                
    ForbiddenError:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 403
              message:
                type: string
                example: "Insufficient permissions to access this resource"
                
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 404
              message:
                type: string
                example: "Resource not found"
                
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 500
              message:
                type: string
                example: "Internal server error"
                
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT