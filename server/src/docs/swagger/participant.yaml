openapi: 3.0.3
info:
  title: Participant API
  version: 1.0.0
  description: API endpoints for participant management

paths:
  /participants:
    get:
      tags:
        - Participants
      summary: Get all participants
      description: Retrieve a paginated list of participants (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          description: Field to sort by
          schema:
            type: string
            enum: [userId, eventId, registrationDate, status, createdAt]
            default: registrationDate
        - name: sortOrder
          in: query
          description: Sort order (ascending or descending)
          schema:
            type: string
            enum: [ASC, DESC, asc, desc]
            default: DESC
        - name: status
          in: query
          description: Filter by registration status
          schema:
            type: string
            enum: [registered, attended, cancelled, waitlisted]
        - name: userId
          in: query
          description: Filter by user ID
          schema:
            type: string
            format: uuid
        - name: eventId
          in: query
          description: Filter by event ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of participants retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Participant'
                  - $ref: '#/components/schemas/PaginatedResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Participants
      summary: Register for an event
      description: Register the authenticated user or another user (if admin) for an event
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - eventId
              properties:
                eventId:
                  type: string
                  format: uuid
                  example: "e47ac10b-58cc-4372-a567-0e02b2c3d000"
                userId:
                  type: string
                  format: uuid
                  example: "a47ac10b-58cc-4372-a567-0e02b2c3d000"
                  description: Optional - Admin can register another user (admin only)
                status:
                  type: string
                  enum: [registered, waitlisted]
                  default: registered
                  example: "registered"
                notes:
                  type: string
                  example: "Registration notes or special requests"
      responses:
        '201':
          description: Registered for event successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Registered for event successfully"
                  participant:
                    $ref: '#/components/schemas/Participant'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden - Admin access required to register others
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Event or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Already registered for this event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "User is already registered for this event"
                statusCode: 409
                timestamp: "2025-05-05T12:00:00.000Z"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /participants/{id}:
    get:
      tags:
        - Participants
      summary: Get participant by ID
      description: Retrieve a specific participant by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Participant ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Participant retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  participant:
                    $ref: '#/components/schemas/Participant'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden - Not authorized to view this registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Participants
      summary: Update participant
      description: Update a participant's status or notes
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Participant ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [registered, attended, cancelled, waitlisted]
                  example: "attended"
                notes:
                  type: string
                  example: "Updated notes or special requests"
      responses:
        '200':
          description: Participant updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Participant updated successfully"
                  participant:
                    $ref: '#/components/schemas/Participant'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden - Not authorized to update this registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Participants
      summary: Cancel registration
      description: Cancel a participant's registration
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Participant ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Registration cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Registration cancelled successfully"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden - Not authorized to cancel this registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /participants/user/{userId}:
    get:
      tags:
        - Participants
      summary: Get user's registrations
      description: Retrieve all events a user has registered for
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          description: Filter by registration status
          schema:
            type: string
            enum: [registered, attended, cancelled, waitlisted]
      responses:
        '200':
          description: User's registrations retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Participant'
                  - $ref: '#/components/schemas/PaginatedResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden - Not authorized to view this user's registrations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /participants/event/{eventId}:
    get:
      tags:
        - Participants
      summary: Get event's participants
      description: Retrieve all participants registered for an event
      security:
        - bearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          description: Event ID
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          description: Filter by registration status
          schema:
            type: string
            enum: [registered, attended, cancelled, waitlisted]
      responses:
        '200':
          description: Event's participants retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Participant'
                  - $ref: '#/components/schemas/PaginatedResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden - Not authorized to view this event's participants
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    Participant:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "p47ac10b-58cc-4372-a567-0e02b2c3d000"
        userId:
          type: string
          format: uuid
          example: "a47ac10b-58cc-4372-a567-0e02b2c3d000"
        eventId:
          type: string
          format: uuid
          example: "e47ac10b-58cc-4372-a567-0e02b2c3d000"
        status:
          type: string
          enum: [registered, attended, cancelled, waitlisted]
          example: "registered"
        registrationDate:
          type: string
          format: date-time
          example: "2025-05-05T10:30:00Z"
        checkinTime:
          type: string
          format: date-time
          example: "2025-05-10T09:15:00Z"
        notes:
          type: string
          example: "Vegetarian meal preference"
        createdAt:
          type: string
          format: date-time
          example: "2025-05-05T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-05-05T10:30:00Z"
        user:
          $ref: '#/components/schemas/User'
        event:
          $ref: '#/components/schemas/Event'
    PaginatedResponse:
      type: object
      properties:
        page:
          type: integer
          example: 1
        size:
          type: integer
          example: 10
        totalElements:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 10
        hasPrevious:
          type: boolean
          example: true
        hasNext:
          type: boolean
          example: false